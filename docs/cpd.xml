<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="37" tokens="191">
<file line="42" path="C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jekpro\src\main\java\io\github\prolobjectlink\prolog\jekpro\JekejekePrologDouble.java"/>
<file line="42" path="C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jekpro\src\main\java\io\github\prolobjectlink\prolog\jekpro\JekejekePrologFloat.java"/>
<file line="42" path="C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jekpro\src\main\java\io\github\prolobjectlink\prolog\jekpro\JekejekePrologInteger.java"/>
<file line="42" path="C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jekpro\src\main\java\io\github\prolobjectlink\prolog\jekpro\JekejekePrologLong.java"/>
<codefragment>
<![CDATA[
		super(LONG_TYPE, provider, new TermAtomic(value.longValue()));
	}

	public PrologInteger getPrologInteger() {
		return new JekejekePrologInteger(provider, getIntegerValue());
	}

	public PrologFloat getPrologFloat() {
		return new JekejekePrologFloat(provider, getFloatValue());
	}

	public PrologDouble getPrologDouble() {
		return new JekejekePrologDouble(provider, getDoubleValue());
	}

	public PrologLong getPrologLong() {
		return new JekejekePrologLong(provider, getLongValue());
	}

	public long getLongValue() {
		return ((Number) ((TermAtomic) value).getValue()).longValue();
	}

	public double getDoubleValue() {
		return ((Number) ((TermAtomic) value).getValue()).doubleValue();
	}

	public int getIntegerValue() {
		return ((Number) ((TermAtomic) value).getValue()).intValue();
	}

	public float getFloatValue() {
		return ((Number) ((TermAtomic) value).getValue()).floatValue();
	}

	public PrologTerm[] getArguments() {
		return new JekejekePrologLong[0];
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="105">
<file line="269" path="C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jekpro\src\main\java\io\github\prolobjectlink\prolog\jekpro\JekejekePrologEngine.java"/>
<file line="287" path="C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jekpro\src\main\java\io\github\prolobjectlink\prolog\jekpro\JekejekePrologEngine.java"/>
<codefragment>
<![CDATA[
		AbstractTerm clause = fromTerm(head, body, AbstractTerm.class);
		try {
			clause = prolog.parseTerm("clause(" + clause + ")", EMPTY);
			prolog.iterator(clause).next().close();
			CallIn callin = prolog.iterator(clause);
			if (callin.hasNext()) {
				return true;
			}
		} catch (InterpreterMessage e1) {
			getLogger().error(getClass(), IO, e1);
		} catch (InterpreterException e1) {
			getLogger().error(getClass(), IO, e1);
		}
		return false;
	}

	@Override
	public void retract(String stringClause) {
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="102">
<file line="158" path="C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jekpro\src\main\java\io\github\prolobjectlink\prolog\jekpro\JekejekePrologQuery.java"/>
<file line="206" path="C:\eclipse-jee-photon-workspace\prolobjectlink-jpi-jekpro\src\main\java\io\github\prolobjectlink\prolog\jekpro\JekejekePrologQuery.java"/>
<codefragment>
<![CDATA[
	public Map<String, PrologTerm> nextVariablesSolution() {
		Map<String, PrologTerm> map = new HashMap<String, PrologTerm>();
		try {
			if (hasSolution()) {
				for (int i = 0; i < variables.size(); i++) {
					Object object = variables.get(i);
					AbstractTerm variable = (AbstractTerm) object;
					String term = prolog.unparseTerm(variable, EMPTY);
					String name = inverseNames.get(variable.toString());
					map.put(name, getProvider().parseTerm(term));
				}
]]>
</codefragment>
</duplication>
</pmd-cpd>